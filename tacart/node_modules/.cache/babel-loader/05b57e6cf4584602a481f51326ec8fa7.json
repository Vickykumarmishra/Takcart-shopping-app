{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar generators = require('@motionone/generators');\nvar utils = require('@motionone/utils');\nvar getUnit = require('../animate/utils/get-unit.cjs.js');\nvar transforms = require('../animate/utils/transforms.cjs.js');\nvar getStyleName = require('../animate/utils/get-style-name.cjs.js');\nfunction canGenerate(value) {\n  return utils.isNumber(value) && !isNaN(value);\n}\nfunction getAsNumber(value) {\n  return utils.isString(value) ? parseFloat(value) : value;\n}\nfunction createGeneratorEasing(createGenerator) {\n  var keyframesCache = new WeakMap();\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var generatorCache = new Map();\n    var getGenerator = function getGenerator() {\n      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var isScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var key = \"\".concat(from, \"-\").concat(to, \"-\").concat(velocity, \"-\").concat(isScale);\n      if (!generatorCache.has(key)) {\n        generatorCache.set(key, createGenerator(Object.assign({\n          from: from,\n          to: to,\n          velocity: velocity,\n          restSpeed: isScale ? 0.05 : 2,\n          restDistance: isScale ? 0.01 : 0.5\n        }, options)));\n      }\n      return generatorCache.get(key);\n    };\n    var getKeyframes = function getKeyframes(generator, toUnit) {\n      if (!keyframesCache.has(generator)) {\n        keyframesCache.set(generator, generators.pregenerateKeyframes(generator, toUnit));\n      }\n      return keyframesCache.get(generator);\n    };\n    return {\n      createAnimation: function createAnimation(keyframes) {\n        var shouldGenerate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var getOrigin = arguments.length > 2 ? arguments[2] : undefined;\n        var name = arguments.length > 3 ? arguments[3] : undefined;\n        var motionValue = arguments.length > 4 ? arguments[4] : undefined;\n        var settings;\n        var origin;\n        var target;\n        var velocity = 0;\n        var toUnit = utils.noopReturn;\n        var numKeyframes = keyframes.length;\n        /**\n         * If we should generate an animation for this value, run some preperation\n         * like resolving target/origin, finding a unit (if any) and determine if\n         * it is actually possible to generate.\n         */\n        if (shouldGenerate) {\n          toUnit = getUnit.getUnitConverter(keyframes, name ? transforms.transformDefinitions.get(getStyleName.getStyleName(name)) : undefined);\n          var targetDefinition = keyframes[numKeyframes - 1];\n          target = getAsNumber(targetDefinition);\n          if (numKeyframes > 1 && keyframes[0] !== null) {\n            /**\n             * If we have multiple keyframes, take the initial keyframe as the origin.\n             */\n            origin = getAsNumber(keyframes[0]);\n          } else {\n            var prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n            /**\n             * If we have an existing generator for this value we can use it to resolve\n             * the animation's current value and velocity.\n             */\n            if (prevGenerator) {\n              /**\n               * If we have a generator for this value we can use it to resolve\n               * the animations's current value and velocity.\n               */\n              var animation = motionValue.animation,\n                generatorStartTime = motionValue.generatorStartTime;\n              var startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n              var currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n              var prevGeneratorCurrent = prevGenerator(currentTime).current;\n              origin = prevGeneratorCurrent;\n              velocity = generators.calcGeneratorVelocity(function (t) {\n                return prevGenerator(t).current;\n              }, currentTime, prevGeneratorCurrent);\n            } else if (getOrigin) {\n              /**\n               * As a last resort, read the origin from the DOM.\n               */\n              origin = getAsNumber(getOrigin());\n            }\n          }\n        }\n        /**\n         * If we've determined it is possible to generate an animation, do so.\n         */\n        if (canGenerate(origin) && canGenerate(target)) {\n          var generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n          settings = Object.assign(Object.assign({}, getKeyframes(generator, toUnit)), {\n            easing: \"linear\"\n          });\n          // TODO Add test for this\n          if (motionValue) {\n            motionValue.generator = generator;\n            motionValue.generatorStartTime = performance.now();\n          }\n        }\n        /**\n         * If by now we haven't generated a set of keyframes, create a generic generator\n         * based on the provided props that animates from 0-100 to fetch a rough\n         * \"overshootDuration\" - the moment when the generator first hits the animation target.\n         * Then return animation settings that will run a normal animation for that duration.\n         */\n        if (!settings) {\n          var keyframesMetadata = getKeyframes(getGenerator(0, 100));\n          settings = {\n            easing: \"ease\",\n            duration: keyframesMetadata.overshootDuration\n          };\n        }\n        return settings;\n      }\n    };\n  };\n}\nexports.createGeneratorEasing = createGeneratorEasing;","map":null,"metadata":{},"sourceType":"script"}