{"ast":null,"code":"import { useMotionValue } from './use-motion-value.mjs';\nimport { cancelSync, sync } from '../frameloop/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nfunction useCombineMotionValues(values, combineValues) {\n  /**\n   * Initialise the returned motion value. This remains the same between renders.\n   */\n  var value = useMotionValue(combineValues());\n  /**\n   * Create a function that will update the template motion value with the latest values.\n   * This is pre-bound so whenever a motion value updates it can schedule its\n   * execution in Framesync. If it's already been scheduled it won't be fired twice\n   * in a single frame.\n   */\n  var updateValue = function updateValue() {\n    return value.set(combineValues());\n  };\n  /**\n   * Synchronously update the motion value with the latest values during the render.\n   * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n   */\n  updateValue();\n  /**\n   * Subscribe to all motion values found within the template. Whenever any of them change,\n   * schedule an update.\n   */\n  useIsomorphicLayoutEffect(function () {\n    var scheduleUpdate = function scheduleUpdate() {\n      return sync.update(updateValue, false, true);\n    };\n    var subscriptions = values.map(function (v) {\n      return v.on(\"change\", scheduleUpdate);\n    });\n    return function () {\n      subscriptions.forEach(function (unsubscribe) {\n        return unsubscribe();\n      });\n      cancelSync.update(updateValue);\n    };\n  });\n  return value;\n}\nexport { useCombineMotionValues };","map":null,"metadata":{},"sourceType":"module"}