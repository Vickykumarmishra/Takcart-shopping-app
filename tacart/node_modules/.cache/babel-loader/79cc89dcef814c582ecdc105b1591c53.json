{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar resolveElements = require('../utils/resolve-elements.cjs.js');\nvar utils = require('@motionone/utils');\nvar thresholds = {\n  any: 0,\n  all: 1\n};\nfunction inView(elementOrSelector, onStart) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    root = _ref.root,\n    rootMargin = _ref.margin,\n    _ref$amount = _ref.amount,\n    amount = _ref$amount === void 0 ? \"any\" : _ref$amount;\n  /**\n   * If this browser doesn't support IntersectionObserver, return a dummy stop function.\n   * Default triggering of onStart is tricky - it could be used for starting/stopping\n   * videos, lazy loading content etc. We could provide an option to enable a fallback, or\n   * provide a fallback callback option.\n   */\n  if (typeof IntersectionObserver === \"undefined\") {\n    return function () {};\n  }\n  var elements = resolveElements.resolveElements(elementOrSelector);\n  var activeIntersections = new WeakMap();\n  var onIntersectionChange = function onIntersectionChange(entries) {\n    entries.forEach(function (entry) {\n      var onEnd = activeIntersections.get(entry.target);\n      /**\n       * If there's no change to the intersection, we don't need to\n       * do anything here.\n       */\n      if (entry.isIntersecting === Boolean(onEnd)) return;\n      if (entry.isIntersecting) {\n        var newOnEnd = onStart(entry);\n        if (utils.isFunction(newOnEnd)) {\n          activeIntersections.set(entry.target, newOnEnd);\n        } else {\n          observer.unobserve(entry.target);\n        }\n      } else if (onEnd) {\n        onEnd(entry);\n        activeIntersections.delete(entry.target);\n      }\n    });\n  };\n  var observer = new IntersectionObserver(onIntersectionChange, {\n    root: root,\n    rootMargin: rootMargin,\n    threshold: typeof amount === \"number\" ? amount : thresholds[amount]\n  });\n  elements.forEach(function (element) {\n    return observer.observe(element);\n  });\n  return function () {\n    return observer.disconnect();\n  };\n}\nexports.inView = inView;","map":null,"metadata":{},"sourceType":"script"}