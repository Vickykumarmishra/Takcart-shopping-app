{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nvar id = 0;\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n    defaultParent = _ref.defaultParent,\n    measureScroll = _ref.measureScroll,\n    checkIsScrollRoot = _ref.checkIsScrollRoot,\n    _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode(elementId) {\n      var _this = this;\n      var latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      _classCallCheck(this, ProjectionNode);\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      this.isTransformDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this or any\n       * child might need recalculating as a result of an updated transform or layout animation.\n       */\n      this.isProjectionDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      // Note: Currently only running on root node\n      this.potentialNodes = new Map();\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n          _this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n      this.updateProjection = function () {\n        _this.nodes.forEach(propagateDirtyNodes);\n        _this.nodes.forEach(resolveTargetDelta);\n        _this.nodes.forEach(calcProjection);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n    }, {\n      key: \"registerPotentialNode\",\n      value: function registerPotentialNode(elementId, node) {\n        this.potentialNodes.set(elementId, node);\n      }\n      /**\n       * Lifecycles\n       */\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var _a;\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _this$options = this.options,\n          layoutId = _this$options.layoutId,\n          layout = _this$options.layout,\n          visualElement = _this$options.visualElement;\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n        this.elementId && this.root.potentialNodes.delete(this.elementId);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          var cancelDelay;\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n              hasLayoutChanged = _ref2.hasLayoutChanged,\n              hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n              newLayout = _ref2.layout;\n            var _a, _b, _c, _d, _e;\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            var layoutTransition = (_b = (_a = _this2.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n            var _visualElement$getPro = visualElement.getProps(),\n              onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n              onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            var targetChanged = !_this2.targetLayout || !boxEquals(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (_this2.options.layoutRoot || ((_c = _this2.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              var animationOptions = _objectSpread({}, getValueTransition(layoutTransition, \"layout\"), {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion || _this2.options.layoutRoot) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged && _this2.animationProgress === 0) {\n                finishAnimation(_this2);\n              }\n              _this2.isLead() && ((_e = (_d = _this2.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n            }\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        var _a, _b;\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      } // only on the root\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        var _a;\n        return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n      } // Note: currently only running on root node\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        var _a;\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        this.animationId++;\n      }\n    }, {\n      key: \"getTransformTemplate\",\n      value: function getTransformTemplate() {\n        var _a;\n        return (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var _a, _b, _c;\n        if (this.root.isUpdateBlocked()) {\n          (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n          return;\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n          if (node.options.layoutRoot) {\n            node.willUpdate(false);\n          }\n        }\n        var _this$options2 = this.options,\n          layoutId = _this$options2.layoutId,\n          layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        this.prevTransformTemplateValue = (_c = this.getTransformTemplate()) === null || _c === void 0 ? void 0 : _c(this.latestValues, \"\");\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      } // Note: Currently only running on root node\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\n         * Search for and mount newly-added projection elements.\n         *\n         * TODO: Every time a new component is rendered we could search up the tree for\n         * the closest mounted node and query from there rather than document.\n         */\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        // Flush any scheduled updates\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        sync.preRender(this.updateProjection, false, true);\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this3 = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        sync.postRender(function () {\n          if (_this3.isLayoutDirty) {\n            _this3.root.didUpdate();\n          } else {\n            _this3.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        var _a;\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        var phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        var needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n        if (needsMeasurement) {\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase: phase,\n            isRoot: checkIsScrollRoot(this.instance),\n            offset: measureScroll(this.instance)\n          };\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        var _a;\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplateValue = (_a = this.getTransformTemplate()) === null || _a === void 0 ? void 0 : _a(this.latestValues, \"\");\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n        roundBox(layoutBox);\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {},\n          source: this.id\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox();\n        // Remove viewport scroll to give page-relative coordinates\n        var scroll = this.root.scroll;\n        if (scroll) {\n          translateAxis(box.x, scroll.offset.x);\n          translateAxis(box.y, scroll.offset.y);\n        }\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n            options = node.options;\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.isRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n              }\n            }\n            translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var _a;\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n        }\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      }\n      /**\n       *\n       */\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.isProjectionDirty = true;\n        this.root.scheduleUpdateProjection();\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread({}, this.options, options, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n      /**\n       * Frame calculations\n       */\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var _a;\n        /**\n         * Once the dirty status of nodes has been spread through the tree, we also\n         * need to check if we have a shared node of a different depth that has itself\n         * been dirtied.\n         */\n        var lead = this.getLead();\n        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n        /**\n         * We don't use transform for this step of processing so we don't\n         * need to check whether any nodes have changed transform.\n         */\n        if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget) return;\n        var _this$options3 = this.options,\n          layout = _this$options3.layout,\n          layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          var relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && relativeParent.layout) {\n            this.relativeParent = relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          var _relativeParent = this.getClosestProjectingParent();\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target) {\n            this.relativeParent = _relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n          return undefined;\n        }\n        if ((this.parent.relativeTarget || this.parent.targetDelta || this.parent.options.layoutRoot) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n        var isProjectionDirty = this.isProjectionDirty,\n          isTransformDirty = this.isTransformDirty;\n        this.isProjectionDirty = this.isTransformDirty = false;\n        var lead = this.getLead();\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        var canSkip = true;\n        if (isProjectionDirty) canSkip = false;\n        if (isShared && isTransformDirty) canSkip = false;\n        if (canSkip) return;\n        var _this$options4 = this.options,\n          layout = _this$options4.layout,\n          layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n        var target = lead.target;\n        if (!target) return;\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var _a, _b, _c;\n        (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this4 = this;\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var _a, _b;\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n        var mixedValues = _objectSpread({}, this.latestValues);\n        var targetDelta = createDelta();\n        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n          this.relativeTarget = this.relativeTargetOrigin = undefined;\n        }\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n        var isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        this.mixTargetDelta = function (latest) {\n          var _a;\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          _this4.setTargetDelta(targetDelta);\n          if (_this4.relativeTarget && _this4.relativeTargetOrigin && _this4.layout && ((_a = _this4.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n            calcRelativePosition(relativeLayout, _this4.layout.layoutBox, _this4.relativeParent.layout.layoutBox);\n            mixBox(_this4.relativeTarget, _this4.relativeTargetOrigin, relativeLayout, progress);\n          }\n          if (isSharedLayoutAnimation) {\n            _this4.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this4.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          _this4.root.scheduleUpdateProjection();\n          _this4.scheduleRender();\n          _this4.animationProgress = progress;\n        };\n        this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this5 = this;\n        var _a, _b;\n        this.notifyListeners(\"animationStart\");\n        (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        if (this.resumingFrom) {\n          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this5.currentAnimation = animate(0, animationTarget, _objectSpread({}, options, {\n            onUpdate: function onUpdate(latest) {\n              var _a;\n              _this5.mixTargetDelta(latest);\n              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n            },\n            onComplete: function onComplete() {\n              var _a;\n              (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n              _this5.completeAnimation();\n            }\n          }));\n          if (_this5.resumingFrom) {\n            _this5.resumingFrom.currentAnimation = _this5.currentAnimation;\n          }\n          _this5.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        var _a;\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        var _a;\n        if (this.currentAnimation) {\n          (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n          target = lead.target,\n          layout = lead.layout,\n          latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        var _a, _b, _c;\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        node.promote({\n          transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n          preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          needsReset = _ref3.needsReset,\n          transition = _ref3.transition,\n          preserveFollowOpacity = _ref3.preserveFollowOpacity;\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return;\n        // If there's no detected rotation values, we can early return without a forced render.\n        var hasRotate = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n        var latestValues = visualElement.latestValues;\n        if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n          hasRotate = true;\n        }\n        // If there's no rotation values, we don't need to do any more.\n        if (!hasRotate) return;\n        var resetValues = {};\n        // Check the rotate value of all axes and reset to 0\n        for (var i = 0; i < transformAxes.length; i++) {\n          var key = \"rotate\" + transformAxes[i];\n          // Record the rotation and then temporarily set it to 0\n          if (latestValues[key]) {\n            resetValues[key] = latestValues[key];\n            visualElement.setStaticValue(key, 0);\n          }\n        }\n        // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n        // Put back all the values we reset\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles() {\n        var styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _a, _b;\n        // TODO: Return lifecycle-persistent object\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n        var transformTemplate = this.getTransformTemplate();\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        var lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        var _this$projectionDelta = this.projectionDelta,\n          x = _this$projectionDelta.x,\n          y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n            correct = _scaleCorrectors$key.correct,\n            applyTo = _scaleCorrectors$key.applyTo;\n          /**\n           * Only apply scale correction to the value if we have an\n           * active projection transform. Otherwise these values become\n           * vulnerable to distortion if the element changes size without\n           * a corresponding layout animation.\n           */\n          var corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n          if (applyTo) {\n            var num = applyTo.length;\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      } // Only run on root\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n      layout = _node$layout.layoutBox,\n      measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    var isShared = snapshot.source !== node.layout.source;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    var visualDelta = createDelta();\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n          parentLayout = relativeParent.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n  /**\n   * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n   * is dirty we can simply pass this forward.\n   */\n  node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n  /**\n   * Propagate isTransformDirty.\n   */\n  node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, elementId) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(elementId, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":null,"metadata":{},"sourceType":"module"}