{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar data = require('./data.cjs.js');\nvar cssVar = require('./utils/css-var.cjs.js');\nvar utils = require('@motionone/utils');\nvar transforms = require('./utils/transforms.cjs.js');\nvar easing = require('./utils/easing.cjs.js');\nvar featureDetection = require('./utils/feature-detection.cjs.js');\nvar keyframes = require('./utils/keyframes.cjs.js');\nvar style = require('./style.cjs.js');\nvar getStyleName = require('./utils/get-style-name.cjs.js');\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\nvar getUnit = require('./utils/get-unit.cjs.js');\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var AnimationPolyfill = arguments.length > 4 ? arguments[4] : undefined;\n  var record = getDevToolsRecord();\n  var isRecording = options.record !== false && record;\n  var animation;\n  var _options$duration = options.duration,\n    duration = _options$duration === void 0 ? utils.defaults.duration : _options$duration,\n    _options$delay = options.delay,\n    delay = _options$delay === void 0 ? utils.defaults.delay : _options$delay,\n    _options$endDelay = options.endDelay,\n    endDelay = _options$endDelay === void 0 ? utils.defaults.endDelay : _options$endDelay,\n    _options$repeat = options.repeat,\n    repeat = _options$repeat === void 0 ? utils.defaults.repeat : _options$repeat,\n    _options$easing = options.easing,\n    easing$1 = _options$easing === void 0 ? utils.defaults.easing : _options$easing,\n    _options$persist = options.persist,\n    persist = _options$persist === void 0 ? false : _options$persist,\n    direction = options.direction,\n    offset = options.offset,\n    _options$allowWebkitA = options.allowWebkitAcceleration,\n    allowWebkitAcceleration = _options$allowWebkitA === void 0 ? false : _options$allowWebkitA;\n  var data$1 = data.getAnimationData(element);\n  var valueIsTransform = transforms.isTransform(key);\n  var canAnimateNatively = featureDetection.supports.waapi();\n  /**\n   * If this is an individual transform, we need to map its\n   * key to a CSS variable and update the element's transform style\n   */\n  valueIsTransform && transforms.addTransformToElement(element, key);\n  var name = getStyleName.getStyleName(key);\n  var motionValue = data.getMotionValue(data$1.values, name);\n  /**\n   * Get definition of value, this will be used to convert numerical\n   * keyframes into the default value type.\n   */\n  var definition = transforms.transformDefinitions.get(name);\n  /**\n   * Stop the current animation, if any. Because this will trigger\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\n   * this is fired now and we return a factory function to create\n   * the actual animation that can get called in batch,\n   */\n  stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) && options.record !== false);\n  /**\n   * Batchable factory function containing all DOM reads.\n   */\n  return function () {\n    var readInitialValue = function readInitialValue() {\n      var _a, _b;\n      return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     * Replace null values with the previous keyframe value, or read\n     * it from the DOM if it's the first keyframe.\n     */\n    var keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n    /**\n     * Detect unit type of keyframes.\n     */\n    var toUnit = getUnit.getUnitConverter(keyframes$1, definition);\n    if (utils.isEasingGenerator(easing$1)) {\n      var custom = easing$1.createAnimation(keyframes$1, key !== \"opacity\", readInitialValue, name, motionValue);\n      easing$1 = custom.easing;\n      keyframes$1 = custom.keyframes || keyframes$1;\n      duration = custom.duration || duration;\n    }\n    /**\n     * If this is a CSS variable we need to register it with the browser\n     * before it can be animated natively. We also set it with setProperty\n     * rather than directly onto the element.style object.\n     */\n    if (cssVar.isCssVar(name)) {\n      if (featureDetection.supports.cssRegisterProperty()) {\n        cssVar.registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\n     * If we've been passed a custom easing function, and this browser\n     * does **not** support linear() easing, and the value is a transform\n     * (and thus a pure number) we can still support the custom easing\n     * by falling back to the animation polyfill.\n     */\n    if (valueIsTransform && !featureDetection.supports.linearEasing() && (utils.isFunction(easing$1) || utils.isEasingList(easing$1) && easing$1.some(utils.isFunction))) {\n      canAnimateNatively = false;\n    }\n    /**\n     * If we can animate this value with WAAPI, do so.\n     */\n    if (canAnimateNatively) {\n      var _element$animate;\n      /**\n       * Convert numbers to default value types. Currently this only supports\n       * transforms but it could also support other value types.\n       */\n      if (definition) {\n        keyframes$1 = keyframes$1.map(function (value) {\n          return utils.isNumber(value) ? definition.toDefaultUnit(value) : value;\n        });\n      }\n      /**\n       * If this browser doesn't support partial/implicit keyframes we need to\n       * explicitly provide one.\n       */\n      if (keyframes$1.length === 1 && (!featureDetection.supports.partialKeyframes() || isRecording)) {\n        keyframes$1.unshift(readInitialValue());\n      }\n      var animationOptions = {\n        delay: utils.time.ms(delay),\n        duration: utils.time.ms(duration),\n        endDelay: utils.time.ms(endDelay),\n        easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1, duration) : undefined,\n        direction: direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate((_element$animate = {}, _defineProperty(_element$animate, name, keyframes$1), _defineProperty(_element$animate, \"offset\", offset), _defineProperty(_element$animate, \"easing\", utils.isEasingList(easing$1) ? easing$1.map(function (thisEasing) {\n        return easing.convertEasing(thisEasing, duration);\n      }) : undefined), _element$animate), animationOptions);\n      /**\n       * Polyfill finished Promise in browsers that don't support it\n       */\n      if (!animation.finished) {\n        animation.finished = new Promise(function (resolve, reject) {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n      var target = keyframes$1[keyframes$1.length - 1];\n      animation.finished.then(function () {\n        if (persist) return;\n        // Apply styles to target\n        style.style.set(element, name, target);\n        // Ensure fill modes don't persist\n        animation.cancel();\n      }).catch(utils.noop);\n      /**\n       * This forces Webkit to run animations on the main thread by exploiting\n       * this condition:\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n       *\n       * This fixes Webkit's timing bugs, like accelerated animations falling\n       * out of sync with main thread animations and massive delays in starting\n       * accelerated animations in WKWebView.\n       */\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\n       * If we can't animate the value natively then we can fallback to the numbers-only\n       * polyfill for transforms.\n       */\n    } else if (AnimationPolyfill && valueIsTransform) {\n      /**\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\n       * it into a number before passing to the Animation polyfill.\n       */\n      keyframes$1 = keyframes$1.map(function (value) {\n        return typeof value === \"string\" ? parseFloat(value) : value;\n      });\n      /**\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\n       * the current value from the DOM.\n       */\n      if (keyframes$1.length === 1) {\n        keyframes$1.unshift(parseFloat(readInitialValue()));\n      }\n      animation = new AnimationPolyfill(function (latest) {\n        style.style.set(element, name, toUnit ? toUnit(latest) : latest);\n      }, keyframes$1, Object.assign(Object.assign({}, options), {\n        duration: duration,\n        easing: easing$1\n      }));\n    } else {\n      var _target = keyframes$1[keyframes$1.length - 1];\n      style.style.set(element, name, definition && utils.isNumber(_target) ? definition.toDefaultUnit(_target) : _target);\n    }\n    if (isRecording) {\n      record(element, key, keyframes$1, {\n        duration: duration,\n        delay: delay,\n        easing: easing$1,\n        repeat: repeat,\n        offset: offset\n      }, \"motion-one\");\n    }\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\nexports.animateStyle = animateStyle;","map":null,"metadata":{},"sourceType":"script"}