{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nfunction createUseRender() {\n  var forwardMotionProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var useRender = function useRender(Component, props, projectionId, ref, _ref, isStatic) {\n    var latestValues = _ref.latestValues;\n    var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n    var visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    var filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    var elementProps = _objectSpread({}, filteredProps, visualProps, {\n      ref: ref\n    });\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n    var children = props.children;\n    var renderedChildren = useMemo(function () {\n      return isMotionValue(children) ? children.get() : children;\n    }, [children]);\n    if (projectionId) {\n      elementProps[\"data-projection-id\"] = projectionId;\n    }\n    return createElement(Component, _objectSpread({}, elementProps, {\n      children: renderedChildren\n    }));\n  };\n  return useRender;\n}\nexport { createUseRender };","map":null,"metadata":{},"sourceType":"module"}