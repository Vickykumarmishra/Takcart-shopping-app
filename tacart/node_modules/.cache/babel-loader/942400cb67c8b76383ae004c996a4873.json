{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { addUniqueItem, removeItem } from './array.mjs';\nvar SubscriptionManager = /*#__PURE__*/function () {\n  function SubscriptionManager() {\n    _classCallCheck(this, SubscriptionManager);\n    this.subscriptions = [];\n  }\n  _createClass(SubscriptionManager, [{\n    key: \"add\",\n    value: function add(handler) {\n      var _this = this;\n      addUniqueItem(this.subscriptions, handler);\n      return function () {\n        return removeItem(_this.subscriptions, handler);\n      };\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(a, b, c) {\n      var numSubscriptions = this.subscriptions.length;\n      if (!numSubscriptions) return;\n      if (numSubscriptions === 1) {\n        /**\n         * If there's only a single handler we can just call it without invoking a loop.\n         */\n        this.subscriptions[0](a, b, c);\n      } else {\n        for (var i = 0; i < numSubscriptions; i++) {\n          /**\n           * Check whether the handler exists before firing as it's possible\n           * the subscriptions were modified during this loop running.\n           */\n          var handler = this.subscriptions[i];\n          handler && handler(a, b, c);\n        }\n      }\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.subscriptions.length;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.subscriptions.length = 0;\n    }\n  }]);\n  return SubscriptionManager;\n}();\nexport { SubscriptionManager };","map":null,"metadata":{},"sourceType":"module"}