{"ast":null,"code":"import { time } from '@motionone/utils';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\nimport { spring } from '../spring/index.es.js';\nvar glide = function glide(_ref) {\n  var _ref$from = _ref.from,\n    from = _ref$from === void 0 ? 0 : _ref$from,\n    _ref$velocity = _ref.velocity,\n    velocity = _ref$velocity === void 0 ? 0.0 : _ref$velocity,\n    _ref$power = _ref.power,\n    power = _ref$power === void 0 ? 0.8 : _ref$power,\n    _ref$decay = _ref.decay,\n    decay = _ref$decay === void 0 ? 0.325 : _ref$decay,\n    bounceDamping = _ref.bounceDamping,\n    bounceStiffness = _ref.bounceStiffness,\n    changeTarget = _ref.changeTarget,\n    min = _ref.min,\n    max = _ref.max,\n    _ref$restDistance = _ref.restDistance,\n    restDistance = _ref$restDistance === void 0 ? 0.5 : _ref$restDistance,\n    restSpeed = _ref.restSpeed;\n  decay = time.ms(decay);\n  var state = {\n    hasReachedTarget: false,\n    done: false,\n    current: from,\n    target: from\n  };\n  var isOutOfBounds = function isOutOfBounds(v) {\n    return min !== undefined && v < min || max !== undefined && v > max;\n  };\n  var nearestBoundary = function nearestBoundary(v) {\n    if (min === undefined) return max;\n    if (max === undefined) return min;\n    return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n  };\n  var amplitude = power * velocity;\n  var ideal = from + amplitude;\n  var target = changeTarget === undefined ? ideal : changeTarget(ideal);\n  state.target = target;\n  /**\n   * If the target has changed we need to re-calculate the amplitude, otherwise\n   * the animation will start from the wrong position.\n   */\n  if (target !== ideal) amplitude = target - from;\n  var calcDelta = function calcDelta(t) {\n    return -amplitude * Math.exp(-t / decay);\n  };\n  var calcLatest = function calcLatest(t) {\n    return target + calcDelta(t);\n  };\n  var applyFriction = function applyFriction(t) {\n    var delta = calcDelta(t);\n    var latest = calcLatest(t);\n    state.done = Math.abs(delta) <= restDistance;\n    state.current = state.done ? target : latest;\n  };\n  /**\n   * Ideally this would resolve for t in a stateless way, we could\n   * do that by always precalculating the animation but as we know\n   * this will be done anyway we can assume that spring will\n   * be discovered during that.\n   */\n  var timeReachedBoundary;\n  var spring$1;\n  var checkCatchBoundary = function checkCatchBoundary(t) {\n    if (!isOutOfBounds(state.current)) return;\n    timeReachedBoundary = t;\n    spring$1 = spring({\n      from: state.current,\n      to: nearestBoundary(state.current),\n      velocity: calcGeneratorVelocity(calcLatest, t, state.current),\n      damping: bounceDamping,\n      stiffness: bounceStiffness,\n      restDistance: restDistance,\n      restSpeed: restSpeed\n    });\n  };\n  checkCatchBoundary(0);\n  return function (t) {\n    /**\n     * We need to resolve the friction to figure out if we need a\n     * spring but we don't want to do this twice per frame. So here\n     * we flag if we updated for this frame and later if we did\n     * we can skip doing it again.\n     */\n    var hasUpdatedFrame = false;\n    if (!spring$1 && timeReachedBoundary === undefined) {\n      hasUpdatedFrame = true;\n      applyFriction(t);\n      checkCatchBoundary(t);\n    }\n    /**\n     * If we have a spring and the provided t is beyond the moment the friction\n     * animation crossed the min/max boundary, use the spring.\n     */\n    if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n      state.hasReachedTarget = true;\n      return spring$1(t - timeReachedBoundary);\n    } else {\n      state.hasReachedTarget = false;\n      !hasUpdatedFrame && applyFriction(t);\n      return state;\n    }\n  };\n};\nexport { glide };","map":null,"metadata":{},"sourceType":"module"}