{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { noopReturn, defaults, isEasingGenerator, isEasingList, interpolate } from '@motionone/utils';\nimport { getEasingFunction } from './utils/easing.es.js';\nvar Animation = /*#__PURE__*/function () {\n  function Animation(output) {\n    var _this = this;\n    var keyframes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 1];\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      easing = _ref.easing,\n      _ref$duration = _ref.duration,\n      initialDuration = _ref$duration === void 0 ? defaults.duration : _ref$duration,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? defaults.delay : _ref$delay,\n      _ref$endDelay = _ref.endDelay,\n      endDelay = _ref$endDelay === void 0 ? defaults.endDelay : _ref$endDelay,\n      _ref$repeat = _ref.repeat,\n      repeat = _ref$repeat === void 0 ? defaults.repeat : _ref$repeat,\n      offset = _ref.offset,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? \"normal\" : _ref$direction;\n    _classCallCheck(this, Animation);\n    this.startTime = null;\n    this.rate = 1;\n    this.t = 0;\n    this.cancelTimestamp = null;\n    this.easing = noopReturn;\n    this.duration = 0;\n    this.totalDuration = 0;\n    this.repeat = 0;\n    this.playState = \"idle\";\n    this.finished = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    easing = easing || defaults.easing;\n    if (isEasingGenerator(easing)) {\n      var custom = easing.createAnimation(keyframes);\n      easing = custom.easing;\n      keyframes = custom.keyframes || keyframes;\n      initialDuration = custom.duration || initialDuration;\n    }\n    this.repeat = repeat;\n    this.easing = isEasingList(easing) ? noopReturn : getEasingFunction(easing);\n    this.updateDuration(initialDuration);\n    var interpolate$1 = interpolate(keyframes, offset, isEasingList(easing) ? easing.map(getEasingFunction) : noopReturn);\n    this.tick = function (timestamp) {\n      var _a;\n      // TODO: Temporary fix for OptionsResolver typing\n      delay = delay;\n      var t = 0;\n      if (_this.pauseTime !== undefined) {\n        t = _this.pauseTime;\n      } else {\n        t = (timestamp - _this.startTime) * _this.rate;\n      }\n      _this.t = t;\n      // Convert to seconds\n      t /= 1000;\n      // Rebase on delay\n      t = Math.max(t - delay, 0);\n      /**\n       * If this animation has finished, set the current time\n       * to the total duration.\n       */\n      if (_this.playState === \"finished\" && _this.pauseTime === undefined) {\n        t = _this.totalDuration;\n      }\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      var progress = t / _this.duration;\n      // TODO progress += iterationStart\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n      var currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n      var iterationProgress = progress % 1.0;\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n      iterationProgress === 1 && currentIteration--;\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n      var iterationIsOdd = currentIteration % 2;\n      if (direction === \"reverse\" || direction === \"alternate\" && iterationIsOdd || direction === \"alternate-reverse\" && !iterationIsOdd) {\n        iterationProgress = 1 - iterationProgress;\n      }\n      var p = t >= _this.totalDuration ? 1 : Math.min(iterationProgress, 1);\n      var latest = interpolate$1(_this.easing(p));\n      output(latest);\n      var isAnimationFinished = _this.pauseTime === undefined && (_this.playState === \"finished\" || t >= _this.totalDuration + endDelay);\n      if (isAnimationFinished) {\n        _this.playState = \"finished\";\n        (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, latest);\n      } else if (_this.playState !== \"idle\") {\n        _this.frameRequestId = requestAnimationFrame(_this.tick);\n      }\n    };\n    this.play();\n  }\n  _createClass(Animation, [{\n    key: \"play\",\n    value: function play() {\n      var now = performance.now();\n      this.playState = \"running\";\n      if (this.pauseTime !== undefined) {\n        this.startTime = now - this.pauseTime;\n      } else if (!this.startTime) {\n        this.startTime = now;\n      }\n      this.cancelTimestamp = this.startTime;\n      this.pauseTime = undefined;\n      this.frameRequestId = requestAnimationFrame(this.tick);\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.playState = \"paused\";\n      this.pauseTime = this.t;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.playState = \"finished\";\n      this.tick(0);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _a;\n      this.playState = \"idle\";\n      if (this.frameRequestId !== undefined) {\n        cancelAnimationFrame(this.frameRequestId);\n      }\n      (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, false);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.stop();\n      this.tick(this.cancelTimestamp);\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      this.rate *= -1;\n    }\n  }, {\n    key: \"commitStyles\",\n    value: function commitStyles() {}\n  }, {\n    key: \"updateDuration\",\n    value: function updateDuration(duration) {\n      this.duration = duration;\n      this.totalDuration = duration * (this.repeat + 1);\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return this.t;\n    },\n    set: function set(t) {\n      if (this.pauseTime !== undefined || this.rate === 0) {\n        this.pauseTime = t;\n      } else {\n        this.startTime = performance.now() - t / this.rate;\n      }\n    }\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this.rate;\n    },\n    set: function set(rate) {\n      this.rate = rate;\n    }\n  }]);\n  return Animation;\n}();\nexport { Animation };","map":null,"metadata":{},"sourceType":"module"}