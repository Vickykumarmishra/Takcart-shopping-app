{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar utils = require('@motionone/utils');\nvar stopAnimation = require('./stop-animation.cjs.js');\nvar createAnimation = function createAnimation(factory) {\n  return factory();\n};\nvar withControls = function withControls(animationFactory, options) {\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : utils.defaults.duration;\n  return new Proxy({\n    animations: animationFactory.map(createAnimation).filter(Boolean),\n    duration: duration,\n    options: options\n  }, controls);\n};\n/**\n * TODO:\n * Currently this returns the first animation, ideally it would return\n * the first active animation.\n */\nvar getActiveAnimation = function getActiveAnimation(state) {\n  return state.animations[0];\n};\nvar controls = {\n  get: function get(target, key) {\n    var activeAnimation = getActiveAnimation(target);\n    switch (key) {\n      case \"duration\":\n        return target.duration;\n      case \"currentTime\":\n        return utils.time.s((activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) || 0);\n      case \"playbackRate\":\n      case \"playState\":\n        return activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key];\n      case \"finished\":\n        if (!target.finished) {\n          target.finished = Promise.all(target.animations.map(selectFinished)).catch(utils.noop);\n        }\n        return target.finished;\n      case \"stop\":\n        return function () {\n          target.animations.forEach(function (animation) {\n            return stopAnimation.stopAnimation(animation);\n          });\n        };\n      case \"forEachNative\":\n        /**\n         * This is for internal use only, fire a callback for each\n         * underlying animation.\n         */\n        return function (callback) {\n          target.animations.forEach(function (animation) {\n            return callback(animation, target);\n          });\n        };\n      default:\n        return typeof (activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) === \"undefined\" ? undefined : function () {\n          return target.animations.forEach(function (animation) {\n            return animation[key]();\n          });\n        };\n    }\n  },\n  set: function set(target, key, value) {\n    switch (key) {\n      case \"currentTime\":\n        value = utils.time.ms(value);\n      case \"currentTime\":\n      case \"playbackRate\":\n        for (var i = 0; i < target.animations.length; i++) {\n          target.animations[i][key] = value;\n        }\n        return true;\n    }\n    return false;\n  }\n};\nvar selectFinished = function selectFinished(animation) {\n  return animation.finished;\n};\nexports.controls = controls;\nexports.withControls = withControls;","map":null,"metadata":{},"sourceType":"script"}