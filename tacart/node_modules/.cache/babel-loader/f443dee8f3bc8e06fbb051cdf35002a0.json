{"ast":null,"code":"import { AnimationType } from '../render/utils/types.mjs';\nimport { useDomEvent } from '../events/use-dom-event.mjs';\nimport { useRef, useCallback } from 'react';\nfunction useFocusGesture(_ref) {\n  var whileFocus = _ref.whileFocus,\n    visualElement = _ref.visualElement;\n  var isFocusActive = useRef(false);\n  var animationState = visualElement.animationState;\n  var onFocus = useCallback(function () {\n    var isFocusVisible = false;\n    /**\n     * If this element doesn't match focus-visible then don't\n     * apply whileHover. But, if matches throws that focus-visible\n     * is not a valid selector then in that browser outline styles will be applied\n     * to the element by default and we want to match that behaviour with whileFocus.\n     */\n    try {\n      isFocusVisible = visualElement.current.matches(\":focus-visible\");\n    } catch (e) {\n      isFocusVisible = true;\n    }\n    if (!isFocusVisible || !animationState) return;\n    animationState.setActive(AnimationType.Focus, true);\n    isFocusActive.current = true;\n  }, [animationState]);\n  var onBlur = useCallback(function () {\n    if (!isFocusActive.current || !animationState) return;\n    animationState.setActive(AnimationType.Focus, false);\n    isFocusActive.current = false;\n  }, [animationState]);\n  useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n  useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\nexport { useFocusGesture };","map":null,"metadata":{},"sourceType":"module"}