{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\VICKY MISHRA\\\\Desktop\\\\Takcart-shopping-app\\\\tacart\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { addUniqueItem, removeItem } from '../../utils/array.mjs';\nvar NodeStack = /*#__PURE__*/function () {\n  function NodeStack() {\n    _classCallCheck(this, NodeStack);\n    this.members = [];\n  }\n  _createClass(NodeStack, [{\n    key: \"add\",\n    value: function add(node) {\n      addUniqueItem(this.members, node);\n      node.scheduleRender();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      removeItem(this.members, node);\n      if (node === this.prevLead) {\n        this.prevLead = undefined;\n      }\n      if (node === this.lead) {\n        var prevLead = this.members[this.members.length - 1];\n        if (prevLead) {\n          this.promote(prevLead);\n        }\n      }\n    }\n  }, {\n    key: \"relegate\",\n    value: function relegate(node) {\n      var indexOfNode = this.members.findIndex(function (member) {\n        return node === member;\n      });\n      if (indexOfNode === 0) return false;\n      /**\n       * Find the next projection node that is present\n       */\n      var prevLead;\n      for (var i = indexOfNode; i >= 0; i--) {\n        var member = this.members[i];\n        if (member.isPresent !== false) {\n          prevLead = member;\n          break;\n        }\n      }\n      if (prevLead) {\n        this.promote(prevLead);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"promote\",\n    value: function promote(node, preserveFollowOpacity) {\n      var _a;\n      var prevLead = this.lead;\n      if (node === prevLead) return;\n      this.prevLead = prevLead;\n      this.lead = node;\n      node.show();\n      if (prevLead) {\n        prevLead.instance && prevLead.scheduleRender();\n        node.scheduleRender();\n        node.resumeFrom = prevLead;\n        if (preserveFollowOpacity) {\n          node.resumeFrom.preserveOpacity = true;\n        }\n        if (prevLead.snapshot) {\n          node.snapshot = prevLead.snapshot;\n          node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n        }\n        if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n          node.isLayoutDirty = true;\n        }\n        var crossfade = node.options.crossfade;\n        if (crossfade === false) {\n          prevLead.hide();\n        }\n        /**\n         * TODO:\n         *   - Test border radius when previous node was deleted\n         *   - boxShadow mixing\n         *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n         *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n         *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n         * ---\n         *   - Crossfade opacity of root nodes\n         *   - layoutId changes after animation\n         *   - layoutId changes mid animation\n         */\n      }\n    }\n  }, {\n    key: \"exitAnimationComplete\",\n    value: function exitAnimationComplete() {\n      this.members.forEach(function (node) {\n        var _a, _b, _c, _d, _e;\n        (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n      });\n    }\n  }, {\n    key: \"scheduleRender\",\n    value: function scheduleRender() {\n      this.members.forEach(function (node) {\n        node.instance && node.scheduleRender(false);\n      });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n  }, {\n    key: \"removeLeadSnapshot\",\n    value: function removeLeadSnapshot() {\n      if (this.lead && this.lead.snapshot) {\n        this.lead.snapshot = undefined;\n      }\n    }\n  }]);\n  return NodeStack;\n}();\nexport { NodeStack };","map":null,"metadata":{},"sourceType":"module"}