{"ast":null,"code":"import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\nfunction createHoverEvent(visualElement, isActive, applyVariants, callback) {\n  return function (event, info) {\n    if (event.type === \"touch\" || isDragActive()) return;\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n    if (applyVariants && visualElement.animationState) {\n      visualElement.animationState.setActive(AnimationType.Hover, isActive);\n    }\n    callback && callback(event, info);\n  };\n}\nfunction useHoverGesture(_ref) {\n  var onHoverStart = _ref.onHoverStart,\n    onHoverEnd = _ref.onHoverEnd,\n    whileHover = _ref.whileHover,\n    visualElement = _ref.visualElement;\n  usePointerEvent(visualElement, \"pointerenter\", useMemo(function () {\n    return onHoverStart || whileHover ? createHoverEvent(visualElement, true, Boolean(whileHover), onHoverStart) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverStart\n  });\n  usePointerEvent(visualElement, \"pointerleave\", useMemo(function () {\n    return onHoverEnd || whileHover ? createHoverEvent(visualElement, false, Boolean(whileHover), onHoverEnd) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverEnd\n  });\n}\nexport { useHoverGesture };","map":null,"metadata":{},"sourceType":"module"}