{"ast":null,"code":"import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isZero, getZeroUnit } from './transitions.mjs';\nfunction getKeyframes(value, valueName, target, transition) {\n  var isTargetAnimatable = isAnimatable(valueName, target);\n  var origin = transition.from !== undefined ? transition.from : value.get();\n  if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n    /**\n     * If we're trying to animate from \"none\", try and get an animatable version\n     * of the target. This could be improved to work both ways.\n     */\n    origin = getAnimatableNone(valueName, target);\n  } else if (isZero(origin) && typeof target === \"string\") {\n    origin = getZeroUnit(target);\n  } else if (!Array.isArray(target) && isZero(target) && typeof origin === \"string\") {\n    target = getZeroUnit(origin);\n  }\n  /**\n   * If the target has been defined as a series of keyframes\n   */\n  if (Array.isArray(target)) {\n    /**\n     * Ensure an initial wildcard keyframe is hydrated by the origin.\n     * TODO: Support extra wildcard keyframes i.e [1, null, 0]\n     */\n    if (target[0] === null) {\n      target[0] = origin;\n    }\n    return target;\n  } else {\n    return [origin, target];\n  }\n}\nexport { getKeyframes };","map":null,"metadata":{},"sourceType":"module"}