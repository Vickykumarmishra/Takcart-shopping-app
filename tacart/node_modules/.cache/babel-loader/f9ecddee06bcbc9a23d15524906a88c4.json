{"ast":null,"code":"import { useContext, useRef, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useVisualElementContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n  var parent = useVisualElementContext();\n  var lazyContext = useContext(LazyContext);\n  var presenceContext = useContext(PresenceContext);\n  var reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n  var visualElementRef = useRef();\n  /**\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n   */\n  createVisualElement = createVisualElement || lazyContext.renderer;\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState: visualState,\n      parent: parent,\n      props: props,\n      presenceId: presenceContext ? presenceContext.id : undefined,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig: reducedMotionConfig\n    });\n  }\n  var visualElement = visualElementRef.current;\n  useIsomorphicLayoutEffect(function () {\n    visualElement && visualElement.render();\n  });\n  /**\n   * Ideally this function would always run in a useEffect.\n   *\n   * However, if we have optimised appear animations to handoff from,\n   * it needs to happen synchronously to ensure there's no flash of\n   * incorrect styles in the event of a hydration error.\n   *\n   * So if we detect a situtation where optimised appear animations\n   * are running, we use useLayoutEffect to trigger animations.\n   */\n  var useAnimateChangesEffect = window.HandoffAppearAnimations ? useIsomorphicLayoutEffect : useEffect;\n  useAnimateChangesEffect(function () {\n    if (visualElement && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  return visualElement;\n}\nexport { useVisualElement };","map":null,"metadata":{},"sourceType":"module"}